' this as lines 1000- of the installer, and will load "make *" modules in using
' module64 ml
{def:modbasic}

{uses:.\includes\quoter-assignments.lbl}

{number:1}
{:1}
	rem "make menu"

	f$="modbasic c000 v2":gosub {:sub.bload}
	sys 49152
	f$="ml c500":gosub {:sub.bload}
	goto {:installer}

{nice:10}
{:sub.bload}
' bload file in f$
{uses:.\includes\current-drive.lbl}
{uses:.\includes\bload.lbl}
	return

' there should be a menu to do a 'full install' or pick individual modules

' 2 main ways of getting data: read from seq file or data statements

' variables each installer should define:
' m$="monsters" <- module name
' ve=.01 filename, version
' lm$ = module to link to -- if null, RETURN to "make menu"

' eb=extra bytes (something not specified in the data itself,
'	like a leading "1" for a game item being available would
'	be "2" since "1" + CR <separate REL field> = 2 bytes)

' should be subroutines in "make menu" for:
' - getting data (either from DATA statements or disk file)

' subroutines in main installer kernel:
' get max # of records
' get max record length

{number:997}
	rem "make menu"
	rem copr. 1995-2017 pinacolada
	rem written for commodoreserver
	rem --- for tada ---

' 1001
{uses:.\includes\rel-pointer.lbl}

{number:1011}
{:file.open}
	fn f$:close 2:open 2,dv,2,dr$+f$
' 1012
{uses:.\includes\check-io-status.lbl}

' 1026
{:file.append_or_write} ' ("<filename>")
{number:1026}
' for SEQ files, open "e.t.<filename>,s,<mode>"
	fn a$:gosub {:1027}(a$,"a"):on e+1 goto {:return}:gosub {:1027}(a$,"w"):return

{number:1027}
{:1027} ' ("filename","mode")
	fn f$,m$
	gosub {:file.open}("e.t."+f$+",s,"+m$):gosub {:check.io_status}:return

' subroutine
{number:1067}
{:link.module}
	fn a$
	if cm$=a$ and e=. then 1
	cm$=a$:print" [Loading "q$cm$q$"...]":sys ml,"0:"+cm$:gosub {:check.io_status}:if e=. then 1
	print a$:return

' 1079:
{uses:.\includes\blocks-free.lbl}

{:return}
{number:1603}
	return

{number:1811}
{:1811}
	close 2:close 15:print "Shutting down modBASIC.":sys 49155:end

' 1902:
{uses:.\includes\cursor-get.lbl}

' 1910:
{uses:.\includes\yes-no.lbl}

{number:2000}
{:installer}
{uses:.\includes\variable-declarations.lbl}

' setup:
	gosub {:sub.title}("Make Menu","Sep 11 12:48 PM",.01)
	rem fixme


{:sub.title}
{uses:.\includes\title.lbl}
	return


{:sub.show_version}
' ve=version, drops leading space if ve>1
	print"TADA "m$" installer v"mid$(str$(ve),2+(ve<.))
	return

' mx=# of records
' (may or may not be in a rel file, that's why no 'gosub {:record_pointer}')
{:sub.get_max_records}
	sys ia,40,2,1,a$:mx=val(a$)

	print right$("    "+str$(mx),5)" "m$
	print"{midline:5}" ' solid horizontal line
	print"      best record length"
	for xx=1 to mx:d$=""

' get data from file
' leading # = comment
' single  ^ = end of record

' build one complete record, separated by carriage returns if multiple fields

	gosub {:sub.get_file_data}

' this could be useful in 'make level <x>' files:
{:sub.get_line}
' toss comments:
	sys ia,40,2,1,a$:if left$(a$,1)="#" then {:get_line}
' end of file:
	if a$="{up arrow}" or (64 and st=64) then e=64
	return

' calculate max record length:
' whether from data statements or disk file:
' l: current length of record
	z=len(a$):if z>l then l=z
{:420}
	print"{up}"right$("   "+str$(l),5)
	next:if eb=. then {:440}
	print"+ "+right$("  "+str$(eb),3)" additional data byte";:if eb>1 then print"s";
	print" per record"
	l=l+eb:print "{midline:5}"
	print right$("    "+mid$(str$(l),2),5)" total":print
{:440}
' check for existing file:
	close 2:print# 15,"r"dr$f$"="f$:gosub {:check.io_status}
' 62=file not found
	close 2:if e=62 then {:create_file}

	print"Warning: "e$"... replace? ";:gosub {:sub.yes_no}(1)
	if a=. then print"Skipping.":e=.:goto {:next_module}
	print"Deleting "q$f$q$"...";:print# 15,"s"dr$f$:print:gosub {:check.io_status}

{:create_file}
	x=mx*(l+1):print x"bytes,";:x%=x/254+.5:print x%"blocks.
	print"Checking blocks free...";:gosub {:sub.blocks_free}
	if s=0 then print"{rvrs on} BF Warning {rvrs off} - Aborted.":goto {:next_module}
	print"Ok":print
{:465}
	gosub {:file.open}(f$+",l,"+chr$(l)):if e then print a$:goto {:next_module}
	print"Creating "q$f$q$:for x=1 to mx+1:gosub {:record_pointer}(x)
	print# 2,chr$(255):print"{up}"tab(27)right$("    "+str$(x),5)" (";
	print mid$(str$(int(x/mx*100)),2)"%)":gosub {:check.io_status}
	if e<>50 then x=mx:next:goto {:post_install}
{:490}
	next:print:print "Writing data..."
	gosub {:record_pointer}(1):print# 2,mx
'	for x=2 to mx+1:x$=""
'	:for y=1 to 3:print# 2,x$:
	gosub {:write_data}

	x%=x:print"{up}"tab(27)right$("    "+str$(x%),5)" (";
	print mid$(str$(int(x/mx*100)),2)"%)":gosub {:check.io_status}:if e then print a$:x=mx+1
	next:close 2
	if e then print a$:goto {:next_module}
	print r$"File successfully created!"

{:next_module}
' fixme: called to check whether there are any remaining modules to run
	e=.

' hook for installer menu

'	if nm$<>"" then:gosub {:link.module}(nm$)
'	if e then print "Can't find "q$a$q$", aborting.":goto {:1811}

	gosub {:sub.blocks_free}("make*",dv,1)
'{:get_files}
'	gosub {:sub.get_line}:if e=64 then {:get_files2}
'	sys ia,2,40,1,a$:if a$="^" or (64 and st)=64 then {:get_files2}

{:installer_menu}
	x=.:print "Installer menu:"
	x=x+1:pa$(x)=a$:print chr$(64+x)") "a$:goto {:get_files}
	print "Ctrl-A: Run all"tab(26)"Ctrl-Q: Quit"
	print
	print "Type letter: ";
{:prompt}
	gosub {:sub.cursor_get}:sys is,"{$01}{$11}abcdefghijklmnopqrstuvwxyz":if i%=. then {:prompt}
' todo: move POKE (trace function uses here)
' todo: store installer module names with static array system?
	if i%=1 then print "Run all":poke 828,i%
	if i%<>2 then {:check_module}

	print "Quit":gosub {:sub.are_you_sure}(0):if a=0 then {:installer_menu}
	goto {:1811}

{:check_module}
' todo: check whether key pressed has module associated with it
	print an$:gosub {:link.module}(a$(i%-2))

{uses:.\includes\logging.lbl}

{nice:100}
	REM "MAKE MENU"
